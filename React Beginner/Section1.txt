Quiz 1

1. What are the two problems React tries to solve?
Adding dynamic data and user interactions to update our HTML; to pass data to react and recieve HTML views as a result. 
2. What is the main difference between React and jQUery?
jQuery uses queries to manipulate the DOM directly, this is an issue because it results in tons of lines and very slow code without optimized algorithms. React, on the otherhand, uses a virtual DOM (VDOM) which is a series of javascript objects that resemble the structure of the real DOM. React replaces the entire DOM but has optimizations set to make it incredibly fast.
3. How does React simplify your code?
React makes code alot simpler because queries do not have to be used directly. The addition of JSX also makes code more readable. 

Quiz 2
1. What JavaScript language construct is used to implement virtual DOM elements in React?
objects
2. What field is used in React to set a class for the elements?
className: {}, because class is a reserved word in javascript 
3. How are interactions implemented in React?
With synthetic user event handlers such as onClick, OnKeydown, etc. These allow us to add event handlers to objects we created.

How actual React objects look like (VDOM elements):
let reactElement = {
  // the $$typeof property tells react that this object is a react element and that react should use it to create an element
  $$typeof:magicValue,
  // the ref property holds a reference to the corresponding DOM element after the react element is rendered to the DOM, if we arent using it, it must be set to null.
  ref: null,
  // the type property defines the HTML- tag we want to generate
  type: "h1",
  // The props property defines properties that get passed down to the element
  props: {
    // We are passing down a text node here as a child
    children:"Hello, world!",
    // passing a class to the element 
    className: "abc",
    // Adding CSS styles
    style:{
      textAlign: "center"
    },
    // Adding event handlers via synthetic events:
    onClick: function(event){
      alert(`${event.target} has been clicked`);
    }
  }

}

1. Element Factory
It's quite cumbersome to need to create an object for every single react element we create. We can instead use the react helper function, React.createElement() which will automatically add the $$type and ref attributes for our elements each time we call them

Instead of the object we created before, we can type:

let anotherElement = React.createElement(
  "p",
  null,
  "A nice text paragraph"
)

The inputs are: 1. the type of element to create, 2. The props of the element including: event handlers, styles, dynamic data (must be null if no props are used), 3. The children of the element such as text nodes, you can add another react element here to do classic DOM nesting.

A more complex example:
let reactElement = React.createElement(
  // Type of element
  "h1",
  // All of our props excluding our children
  {
    // Classes to attach to element
    className: "abc",
    // Styles of the element
    style: {
      textAlign: "center"
    },
    // Event handlers
    onClick: function(){
      alert("click");
    }
  },
  // Child element aka text node in this case
  "Hello, world!"
)

// The normal object notation form of this example is the example above!

Quiz 3
1. What are the three arguments the React.createElement() function accepts?
  1. Type of element, h1, p, etc 
  2. Props of the element 
  3. Children of the element, can be a text node or another element entirely 
2. What does the React.createElement() function return?
  React element objects 
3. What does the React.createElement add that we need to do manually when using element objects
  Special identifiers such as $$typeof and ref 


  Part 2 - JSX
  JSX is React's version of template languages used to create markup that embedds HTML with JavaScript. It does however come with a major drawback: it needs an extra compiling step to run in a browser. If we want to use JSX with react, we must use a JavaScript compiler like Babel which usually compiles newer JavaScript code to earlier versions that is useable by all browsers. In the JSX case, Babel compiles our JSX code down to regular JavaScript such as the React.createElement() calls we used before.

  To setup Babel, we need to include the babel compiler into our application by adding it through a script tag then instructing babel to compile our JSX to javascript:

  Babel script tag:
  <script src="https://unpkg.com/@babel/standalone/babel.min.js">

  In order to instruct babel to compile our custom JSX code, we must write our JSX inside a separate script tag formatted like this:
  <script type="text/babel">
  your code 
  </script>
  or
  <script type="text/babel" src="index.js" />

  Writing JSX 
  let anotherElement = <p>A nice text paragraph</p>;

  the above is compiled to the following:
  anotherElement = React.createElement(
    "p",
    null,
    "A nice text paragraph"
  );

  Creating complex elements
  JSX lets us create complex elements, not just the base HTML tags we're used to. If we use lowercase tags, babel will pass the corresponding string to React.createElement(), such as: if we write <p></p>, babel will pass the string "p" to create a paragraph element. We can however create custom elements by passing uppercase elements, this will pass a variable to the function call. This lets us create custom elements such as: <CustomElement />. We can also insert the tags we put into React.createElement by passing them like HTML tags <CustomElement style={{backgroundColor: "red"}} />, if no props are passed, null will be passed in the createElement function call.

  Example:
  let reactElement = (
    <h1 className="abc" style={{ textAlign: "center" } onClick={function(){
      alert("click");
    }}}>
    Hello, world!
    </h1>
  )
  Note that we can embedd javascript directly in JSX using curly braces

  We can also pass in custom props via propName="value", these props can be passed down to embedded elements.

Another example of using Javascript with JSX:
<h1>{loggedIn ? `Hello {userName}!` : "Please sign in!"}</h1>
This will render hello username if the used is logged in or please sign in if they aren't into an h1 tag!

Quiz
1. What extra tool is needed to run JSX code?
Babel, a compiler. 
2. To what JavaScript construct is a JSX element compiled to?
Normal javascript code in the form of a React.createElement() function call 
3. How can we execute regular JavaScript inside JSX?
By placing the regular JavaScript in curly braces such as <h1>{isMale? "Hey bro" : "Hi girlbro";} </h1>
Quiz 1

1. What are the two problems React tries to solve?
Adding dynamic data and user interactions to update our HTML; to pass data to react and recieve HTML views as a result. 
2. What is the main difference between React and jQUery?
jQuery uses queries to manipulate the DOM directly, this is an issue because it results in tons of lines and very slow code without optimized algorithms. React, on the otherhand, uses a virtual DOM (VDOM) which is a series of javascript objects that resemble the structure of the real DOM. React replaces the entire DOM but has optimizations set to make it incredibly fast.
3. How does React simplify your code?
React makes code alot simpler because queries do not have to be used directly. The addition of JSX also makes code more readable. 

Quiz 2
1. What JavaScript language construct is used to implement virtual DOM elements in React?
objects
2. What field is used in React to set a class for the elements?
className: {}, because class is a reserved word in javascript 
3. How are interactions implemented in React?
With synthetic user event handlers such as onClick, OnKeydown, etc. These allow us to add event handlers to objects we created.

How actual React objects look like (VDOM elements):
let reactElement = {
  // the $$typeof property tells react that this object is a react element and that react should use it to create an element
  $$typeof:magicValue,
  // the ref property holds a reference to the corresponding DOM element after the react element is rendered to the DOM, if we arent using it, it must be set to null.
  ref: null,
  // the type property defines the HTML- tag we want to generate
  type: "h1",
  // The props property defines properties that get passed down to the element
  props: {
    // We are passing down a text node here as a child
    children:"Hello, world!",
    // passing a class to the element 
    className: "abc",
    // Adding CSS styles
    style:{
      textAlign: "center"
    },
    // Adding event handlers via synthetic events:
    onClick: function(event){
      alert(`${event.target} has been clicked`);
    }
  }

}

1. Element Factory
It's quite cumbersome to need to create an object for every single react element we create. We can instead use the react helper function, React.createElement() which will automatically add the $$type and ref attributes for our elements each time we call them

Instead of the object we created before, we can type:

let anotherElement = React.createElement(
  "p",
  null,
  "A nice text paragraph"
)

The inputs are: 1. the type of element to create, 2. The props of the element including: event handlers, styles, dynamic data (must be null if no props are used), 3. The children of the element such as text nodes, you can add another react element here to do classic DOM nesting.

A more complex example:
let reactElement = React.createElement(
  // Type of element
  "h1",
  // All of our props excluding our children
  {
    // Classes to attach to element
    className: "abc",
    // Styles of the element
    style: {
      textAlign: "center"
    },
    // Event handlers
    onClick: function(){
      alert("click");
    }
  },
  // Child element aka text node in this case
  "Hello, world!"
)

// The normal object notation form of this example is the example above!

Quiz 3
1. What are the three arguments the React.createElement() function accepts?
  1. Type of element, h1, p, etc 
  2. Props of the element 
  3. Children of the element, can be a text node or another element entirely 
2. What does the React.createElement() function return?
  React element objects 
3. What does the React.createElement add that we need to do manually when using element objects
  Special identifiers such as $$typeof and ref 


  Part 2 - JSX
  JSX is React's version of template languages used to create markup that embedds HTML with JavaScript. It does however come with a major drawback: it needs an extra compiling step to run in a browser. If we want to use JSX with react, we must use a JavaScript compiler like Babel which usually compiles newer JavaScript code to earlier versions that is useable by all browsers. In the JSX case, Babel compiles our JSX code down to regular JavaScript such as the React.createElement() calls we used before.

  To setup Babel, we need to include the babel compiler into our application by adding it through a script tag then instructing babel to compile our JSX to javascript:

  Babel script tag:
  <script src="https://unpkg.com/@babel/standalone/babel.min.js">

  In order to instruct babel to compile our custom JSX code, we must write our JSX inside a separate script tag formatted like this:
  <script type="text/babel">
  your code 
  </script>
  or
  <script type="text/babel" src="index.js" />

  Writing JSX 
  let anotherElement = <p>A nice text paragraph</p>;

  the above is compiled to the following:
  anotherElement = React.createElement(
    "p",
    null,
    "A nice text paragraph"
  );

  Creating complex elements
  JSX lets us create complex elements, not just the base HTML tags we're used to. If we use lowercase tags, babel will pass the corresponding string to React.createElement(), such as: if we write <p></p>, babel will pass the string "p" to create a paragraph element. We can however create custom elements by passing uppercase elements, this will pass a variable to the function call. This lets us create custom elements such as: <CustomElement />. We can also insert the tags we put into React.createElement by passing them like HTML tags <CustomElement style={{backgroundColor: "red"}} />, if no props are passed, null will be passed in the createElement function call.

  Example:
  let reactElement = (
    <h1 className="abc" style={{ textAlign: "center" } onClick={function(){
      alert("click");
    }}}>
    Hello, world!
    </h1>
  )
  Note that we can embedd javascript directly in JSX using curly braces

  We can also pass in custom props via propName="value", these props can be passed down to embedded elements.

Another example of using Javascript with JSX:
<h1>{loggedIn ? `Hello {userName}!` : "Please sign in!"}</h1>
This will render hello username if the used is logged in or please sign in if they aren't into an h1 tag!

Quiz
1. What extra tool is needed to run JSX code?
Babel, a compiler. 
2. To what JavaScript construct is a JSX element compiled to?
Normal javascript code in the form of a React.createElement() function call 
3. How can we execute regular JavaScript inside JSX?
By placing the regular JavaScript in curly braces such as <h1>{isMale? "Hey bro" : "Hi girlbro";} </h1>


Part 3 - Nested elements
One of the most powerful features of JSX is its ability to nest elements 

I. Nesting with Pure JSX
  To regularly nest without JSX, we would have to do something like this:
  React.createElement(
    "p",
    null,
    React.createElement(
      "strong",
      null,
      "Bold text"
    )
    );
  Doing this several times would make our code difficult to read and incredibly long, especially in long production applications. 
With JSX we can instead do this:

<p> <strong>Bold text</strong> </p>

For elements with multiple children:
<p> Hi <strong>Bold text</strong> ! </p>
Since there isn't further nesting, the react.createElement() call would look like this:

React.createElement(
  "p",
  null,
  "Hi ",
  React.createElement("strong",null,"Bold Text"),
  "!"
)
As you can see, if an element has multiple children, we simply add them as extra arguments into the createElement function 

II. Nesting with JavaScript
We can insert JavaScript into JSX using curly braces so we can also nest with JavaScript in JSX!
Example 
///////////////////
let myClass = "abc";

function myText() {
  return "world";
}

let reactElement = (
  <div className={myClass}>
    <h1>Hello {10*10}</h1>
    <h2>{myText()}</h2>
  </div>
)
///////////////////

The above renders the following HTML:
<div class="abc">
  <h1>Hello 100</h1>
  <h2>world</h2>
</div>

NOTE, if we use JavaScript in JSX it MUST have some value. We cannot pass statements or functions that do not return a value! Instead of statements, the ternary operator is highly preferred!

Nesting allows us to create complex element structures without losing flexibility that comes with templating languages. JSX lets us use the full power of JavaScript while templating languages limit JavaScript usage!

1. What do nested JSX elements compile to?
A React.createElement with another React.createElement call given as one of its child arguments (third argument onward)
2. Can JavaScript be used inside JSX's curly braces?
Yes

Part 4 - Components

I. Functional components - basic stateless components. Basically a simple function with an uppercase name that contains some JSX code.

Instead of storing our components in variables as we've done before, we can create a functional component. This solves two problems, if we want to use the element in some other JSX code, we do not have to use curly braces and the data isnt encapsulated.

Example:
** Note the same of the component MUST start with uppercase or we CANNOT use it without curly braces in JSX 

let MyComponent = () => {
  let data = "world";
  return(
    <div>
      <h1>Hello</h1>
      <h2>{data}</h2>
    </div>
  )
}

Remember that Babel looks at the casing of the first letter of the JSX and passes it into React.createElement() either as a string if it's lowercase or as a variable if it is uppercase. In this case it passes a variable which is a reference to the functional component MyComponent.

When we create components we can then reuse them in JSX. For example, we can now do something like this:

<div className="greeting">
  <div>Here is a greeting:</div>
  <MyComponent/>
</div>

renders as:
<div class="greeting"> 
  <div>Here is a greeting:</div> 
  <div> 
    <h1>Hello</h1> 
    <h2>world</h2> 
  </div> 
</div>

We can create a ton of these components and give them special logic and use them as the building blocks of our page.

In React, the general rule of thumb is to keep each component in it's own file and import it into another file if we ever need to use it. Typically the variable name of the import would be the same as the name of the file. REMEMBER to use UpperCases!

Note: if we do use Uppercases, aka components, they must satisfy two requirements:

1. There must exist a variable within the scope the the JSX calling that component, aka if the JSX <MyComponent/> appears on the page, there must exist a variable on the page called MyComponent that is either imported or hard coded on the page 
2. The variable MUST be a function that returns an element, an array of elements or null.

Returning a list of elements
If we want to render a list of elements we can return the elements in an array or in a React.Fragment

Example
function MyComponent(){
  let data = "world";
  return [<h1 key="hello">Hello</h1>, <h2 key="data">{data}</h2>];

}

if we do this, each element must have a unique key property which will help React determine the position of multiple elements in one array. This means if we change on element in the array, React can directly access that element via key rather than replacing every single element. 

We can also use React.Fragment instead of an array if we want to return multiple elements and do not want to keep track of key props or use commas:
function MyComponent(){
  let data = "world";
  return(
    <React.Fragment>
      <h1>Hello</h1>
      <h2>{data}</h2>
    </React.Fragment>
  )
}

Quiz
1. What improvement do functional components bring over regular functions that return elements?
Functional components let us create reusable custom elements that can be integrated into JSX without curly braces and allow for the encapsulation of component-specific data or elements. 

2. What's the major constraint of a components name?
All components must start with an uppercase letter or babel will pass it into React.createElement() as a string and not as a reference to the actual component

3. What do arrays of element need to be updated efficiently by React?
All the elements within an array must have a unique key property so that React can directly access it in the case that the user changes that specific piece of data. This allows React to update without changing all the other data as well. 

Part 5 - Props 
In this section we will learn how to pass data from outside into a component 

I. Call-Site Props 

We already used props previously
<p className="black-text" style={{ fontSize: 42}}></p>
in this case, the properties className and style are both props, properties of the element passed into React.createElement()

Note, we can also pass props into custom elements we create 

let reactElement = <MyComponent className="abc" customData="world" />

Note: we can pass more than strings as props, if we use curly braces we can pass all kinds of data structures and data types. 

These props that look like regular HTML properties are called call-site props. This means that these props are at the area that calls our component in JSX;they are embedded in the area where we call the component!

II. Definition-site Props
We can use props inside components like this:

function MyComponent(props){
  return(
    <div className={props.className}>
      <h1>Hello</h1>
      <h2>{props.customData}</h2>
    </div>
  )
}

All functional components recieves a props objects which is passed to the React.createElement() function as its first argument

III. Default Props 
We can also declare default properties as follows:
MyComponent.defaultProps = {
  customData: "default-data",
  className: "default-class"
}

IV. Customizing Components with Props 
Props allows us to re-use components and give them special configurations: 


// Definition, Here we define a button prop and use a switch to change a certain property based on the props it recieves 
function Button(props) { 
  var style = { 
    color: "white", backgroundColor: "red"
     };

switch (props.size) {
   case "s": 
    style.height = 30; 
    style.width = 50; 
    break; 
  case "l": 
    style.height = 50; 
    style.width = 100; 
  break; 
  default: 
    style.height = 40; 
    style.width = 75; 
  }
return ( 
  <button style={style} onClick={props.onClick}> Click Me! </button> );
}
// Usage - Here we are calling the button component but using a different size prop to render different types of buttons
<Button size="s" onClick={function() { alert("!!!"); }} /> 
<Button onClick={function() { alert("!!!"); }} /> <Button size="l" onClick={function() { alert("!!!"); }} />
V. Special Cases 
There are two special cases for props usage:
  1. Boolean Props 
     If we do not define a value for a prop, it will get the value true. This is similar to regular html properties.

     Example
     <MyComponent active />

     becomes:

     React.createElement(MyComponent, {active:true});
  2. Props Spreading
     We can use the javascript spread operator to spread an object onto a React component which allows for a dynamic amount of props to be passed to an element which can save us alot of time 

     Example 
     let props = {
       className: "abc",
       customData: "world"
     }

     reactElement = <MyComponent {...props} />

     MyComponent gains the props className and customData!

     We can use this in large applications where we dont necessarily want to use every prop and can instead use logic to decide what props to actually pass

     - Props are used to pass state data from parent components to children 
     - Function props are used to pass state from children to parents 
     - React does NOT use two-way binding, data is transfered unidirectionally through props (parent -> child) or function calls (child -> parent)
Quiz 
1. What are props used for in React?
Props are used to pass data from outside of a component into the component. More specifically, to transfer state from parent to child.
2. Does React use two-way binding?
NO, two-way binding does not exist in React. Data flow is unidirectional. Either state from parent to child via props or from child to parent through  function props. 
3. What do function props accomplish in React?
They pass state information back up to the parent component.

Part 6 - Prop Types 
We may want to prevent a user from using a component if they pass the wrong type of value into a prop. For example, we may want the user to pass a string to a prop but they pass an object which causes complications with rendering.

React has a library for type checking at run time called prop types 

You can include proptypes by adding a CDN:
<script src="https://unpkg.com/prop-types@15.6.1/prop-types.js">

OR by using npm 
$npm i prop-types 

I. Runtime Type Checking 
The prop-types library adds a propTypes atribute to our component function which React will then use to validate all the props that are passed into our component.

This validation will occur once the code with the passed props is executed; this is called runtime type checking. 

II. Prop-Types for Functional Components 

For the component:

const myComponent = props => {
  return(
    <div className={props.className}>
      <h1>Hello</h1>
      <h2>{props.customData}</h2>
    </div>
  )
}

we expect customData to be of the type string since we are passing it to an h2, we can set this up with prop types by doing:

MyComponent.propTypes = {
  customData: PropTypes.string
}
// Here the keys passed are the props we want to check and the values are the validators that come with PropTypes 

Here is a list of all valid propTypes we can check for with prop-types: https://www.npmjs.com/package/prop-types;

If we supply the wrong prop type into the prop customData now, we will get the following runtime error:

Warning: Failed prop type: Invalid prop `customData` of type `number` supplied to `MyComponent`, expected `string`.

A more complicated example:
function DateSpan(props){
  let date = props.date,
      day = date.getDate(),
      month = data.getMonth() +1,
      year = date.getFullYear();
  
  return(
    <span>
      {day}.{month}.{year}
    </span>
  )
}
For the above example nothing will be rendered if a prop of type date is not passed into our DateSpan component. Here a date prop of type date is absolutely required!

Quiz
1. At what time are prop-types checked?
At runtime 
2. Are prop-types part of React?
Yes but they do not come with React by default, they must be installed through npm or via a cdn
3. Do prop-types check or alarm you of code that isn't reached?
If a prop doesn't match its required type a warning will be given.

Part 7 - Nested Components 

I. Call-Site Nesting
  Let's explore how we can nest with React.createElement()

  If we type the following JSX:
  <p>
    <em>Hello</em>, world! 
  </p>

  Babel will compile the following code:

  React.createElement(
    "p",
    null,
    React.createElement("em",null,"Hello"),
    ", world!"
  )

  As we can see, adding a child element as an argument to another element will render that child element as a child node into the virtual DOM tree of that element. Here the string world becomes a sibling node to the nested element. This is how we'd nest elements with the React.createElement function.
II. Definition-Site Nesting 
How do we nest something inside a custom component we've create? To do this we must use the children prop which we can basically consider a reference to the content of our component. 

function RedText(props){
  return <p style={{color: "red"}}>{props.children}</p>
}
<RedText>Hello, world!</RedText>

Our red text component renders its children as content into the paragraph tag 

III. Nesting Components into Components 
What we did above also works with components, not just other elements. For example:

function Item(props){
  return <li>{props.children}</li>;
}
function List(props){
  return <ul>{props.children}</ul>;
}
List.defaultProps = {
  children: <Item>Empty</Item>
};

let reactElement = (
  <div>
    <List />
    <List>
      <Item> First </Item>
      <Item> Second </Item>
      <Item> Third </Item>
    </List>
  </div>
)

In this example, the Item component renders its children into an li tag while the List component renders its children into a ul tag. Since we pass Item into List, Item is rendered as props.children for the list, so it is rendered like this:
<ul>
  <li> First </li>
  ....
</ul>

The Children Prop is very unique and can have many types. If the component is passed one child, the children prop holds a reference to the one child passed. If the component is passed multiple children, the children prop will hold a data-structure that holds all the child elements, a child collection. It can also be undefined if nothing is passed into it. 
  - We can run utility methods such as .map(), .count(), and .toArray() on the React.Children object to work with the content of the prop without worrying about its actual content 

Quiz 
  1. How are nested elements accessed inside a component?
  Through that components children prop; aka by accessing props.children for that component 
  2. How are children different from props?
  Children is a special type of prop that is passed into the component that makes it modular by adding connections between components, replicating a virtual DOM tree. 
  3. Can children have different types?
  Yes, it can be a child collection of multple children, a reference to one child, or undefined.

  Part 8 - Class Components
  Functional components are fine for most parts of any application but they are very limited in what they can do. Functional components can only use their props to change their behavior; props which have to come from some parent component. 

  Logically speaking, since these props have to come from a parent component, they have to be created somewhere up the line; from some parent component. 

  I. Class Components 
  State - an internal dataset which affects the rendering of a component. State in a way can be considered the private data of a specific component. It can be passed down to children of that component as a prop. Changing state will change how that component is rendered.

  Components that have state, stateful components, are called class components. We can create these components by creating a class rather than creating a function.

  Example:
  A good example of a stateful component is a component that keeps track of a counter that can be incremented when a button is clicked. 

  We can create a functional component called counter that recieves the current counts as a prop from its parent: 

  function Counter(props){
    return(
      <div> 
      // We recieve the prop count from the state of some parent component 
        <span>{props.count}</span>
      // Clicking this button triggers an event call that passes data UP to a parent component, telling it that the user wants to increment the state property count by 1. 
        <button onClick={props.onClick}> +1 </button>
      </div>
    );
  }
  // Since this is a FUNCTIONAL component, it does not have any way of storing data (state) and thus must interact with data from a parent component. 

  Notice that this component cannot stand alone, it absolutely needs a parent component to render a count and interact with the user since it cannot store its own data. 

  We can instead create a stateful component (class component) like this: 

  let Counter = createReactClass({
    getInitialState: function(){
      return { count: 0}
    },
    handleClick: function (event){
      this.setState(function(prevState){
        return {count: prevState.count + 1};
      })
    },
    render: function(){
      return(
        <div>
          <span>{this.state.count}</span>
          <button onClick={this.handleClick}> +1 </button>
        </div>
      )
    }
  })

II. The createReactClass() function 

createReactClass is the ES5 way of creating class components in React. As of version 16, this way of creating class components is removed and must be included through a cdn or npm 

$npm i create-react-class 
OR 
<script src="https://unpkg.com/create-react-class@15.6.3/create-react-class.js">

This function returns a new component class 

III. The render() methods
THe createReactClass() function takes a config objects that needs to define a few functions. The most important function that must be defined is the render() method. You'll notice that this method looks very much like a functional component. The render method simply renders JSX for our component. Since it is a method embedded in an object, you must use the this keyword to access both its props and its state (this.props or this.state)

IV. The getInitialState() method
getInitialState() is a method that gets called when an instance of the component is created, right before the render() method is called. This method must return a value that defines the state of our component. This state is then availible for use in our render method with this.state. Note: state is generally an object because objects allow easy access via key value pairs but it can really be anything.

V. Interaction 
We interact with the state in this example by clicking on the button which has a click handler which triggers the custom method handleClick that we wrote. You'll notice this function calls the setState function which is a method provided by React.

VI. The setState() Method 
The setState() method can be called with an object or a callback function like we used above. It lets us update or change our state AND trigger the render method to be called again after the state is changed. This allows for our components to react to its current state. If we call setState with an object, the object gets merfed with the current object inside this.state. If we call it with a callback function, the callback recieves the previous state as an argument and returns a new value that is merged with this.state.

*** ONLY call setState() with an object if the new state doesn't depend on the previous state. The callback version allows for asynchronous functionality. The page will only re-render once the callback is finished executing and other things can be done while it is waiting whereas the object method can cause react to batch mutliple calls and defer the render() call. This batching of calls can lead to unexpected behavior. The function gets the state and the props at the time of the call 

Quiz
1. What is the library called that allows us to use classes without ES2015?
Create React class 
2. What is the main addition of class components over functional components?
State 
3. What are the two versions of the setState() method?
You can pass either a function or a callback that recieves previous state and props at the time that the callback is called

Part 9 - Lifecycle Methods 
Lifecycle methods are methods that allow us to execute actions at particular times. For example, we can execute code before anything renders from the render method of a class component.
  - Lifecycle methods can only be used on class components 
The two most important methods in React are componentDidMount() and componentWillUnmount()

I. The componenetDidMount() Method 
The component "mounts" on our DOM after it is first rendered on the DOM. Thus the componentDidMount() method executes right after the first time the render() method is called.

The most important use-cases for this method are:
  - Fetching asynchronous data
  - Setting up event listeners 

  Example of usage:
  
  let AsyncHelloWorld = createReactClass({
    getInitialState: function(){
      return {data: null};
    },
    componenetDidMount: function(){
      let self = this;
      // NOTE, we have to declare self and set it to this here because the "this" keyword inside of the setTimeout function references one level up aka to the componentDidMount function and not the AsyncHelloWorld class!
      setTimeout(function(){
        self.setState({data: "Hello, world!"});
      }, 2000);
    },
    render: function(){
      let data = this.state.data;
      return data ? <p>{data}</p> : <p>Loading...</p>;
    }
  })

  Here the component is first rendered on the page the first time with an initial state.data equal to null. Since this value is null, the user first sees the text Loading..., when the page is finished rendering (mounts to DOM), the timeout function starts to run and after 2s we see the updated paragraph tag with Hello, world!

The setTimeout function here is usually an API call which will populate the SPA after data is retrieved from a database/API. 

II. The componentWillUnmount() Method 
This method will be called by React right before the component is removed from the DOM. 

The main use-case for this is cleanup

Example:
let AsyncCounter = createReactClass({
  getInitialState: function(){
    return {count: 0};
  },
  incrementCounter: function(){
    this.setState(function(previousState){
      return {count: previousState.count++ };
    });
  },
  interval: null,
  componentDidMount: function(){
    this.interval = setInterval(this.incrementCounter,100)
  },
  componentWillUnmount: function(){
    clearInterval(this.interval);
  },
  render: function(){
    return(
      <p>Count: {this.state.count}</p>;
    )
  }
})

When the state is changed from setInterval inside the component did mount method, the page is re-rendered with the new state which pulls the component off of the page. The componentWillUnmount function clears the interval set by componentDidMount before the page re-renders preventing any more changes to state before a re-render

1. When is the componenetDidMount() lifecycle method called?
It is called right after the component is first rendered on the page
2. When is the componentWillUnmount() lifecycle method called?
It is called right before the component is unmounted or removed from the page 
3. What are the use-cases for the componentDidMount() Method?
  -Setting up event handlers 
  -Waiting for asynchronous data 

Part 10 - Pomodoro Timer  
A pomodoro timer helps divide time into two time-chunks:

1. A work time of 25 minutes
2. A puase time of 5 minutes 

The use-case:
1. The user starts the timer and then they do some work for 25 minutes 
2. The timer automatically switches to a pause mode where the user has to pause for 5 minutes 
3. The timer switches back to work and the cycle restarts
4. The user can stop the timer at any time 

I. Implementation
We will create three components for this app 
  1. PomodoroApp - The root component of our app 
  2. Timer - The component that counts down for a specific duration
  3. Idle - The component that is displayed when the timer isn't running 
The HTML structure of our app will look like the following:
<div style="display: flex; flex-direction: column; align-items: center;">
  <h1>Pomodoro Timer</h1>
  <button>Start timer</button>
  <h2>No Timer Running.</h2>
</div>

Breaking down our components:

I. The idle component - A more or less static page that just displays text and a button. This page does not require state management so we can make it a regular functional component 

let idle => props => {
  return(
    <React.Fragment>
      <button onClick={props.onStart}>Start timer</button>
      <h2>No Timer is Running. </h2>
    </React.Fragment>
  )
}
Notice that we pass the onClick event as we want a stateful component to update its state if this button is clicked. 

NOTE - By wrapping in React.Fragment, we avoid rendering the element with a wrapping element like a div into the DOM. 

II. The Timer Component 
The timer component handles the actual timer count-down. Since it handles some kind of data (time),we must make it a stateful class component. 

let timer = createReactClass({
  // Setting up our state, we grab minutes from a parent component to calculate the seconds we need 
  getInitialState: function(){
    return { seconds: this.props.minutes * 60}
  },
  // We create an interval handler so we can stop the interval at will later on.
  interval: null,
  // When the component renders on the page, run countdown every second 
  componentDidMount: () => {
    this.interval = setInterval(this.countDown,1000);
  },
  // Right before the clock is taken off the page, remove the interval. If we do not do this, the method would continue to call setState even when the component is removed!
  componentWillUnmount: () => {
    clearInterval(this.interval);
  },
   // countdown method will decrement state.seconds everytime its called. State.seconds is below 1, the props.onFinish() function is executed 
   countDown: function(){
      let onFinish = this.props.onFinish;
      this.setState( prevState => {
        let secondsLeft = prevState.seconds -1;
        if (secondsLeft < 1) return onFinish();

        return { seconds: secondsLeft};
      })
    },
    // Rendering our component
  render: function(){
    let seconds = this.state.seconds; // Grab current seconds
    let minutes = Math.floor(seconds / 60); // Calculate minutes
    seconds = seconds % 60; //remove the minutes from the seconds
    return(
      <React.Fragment>
        <button onClick={this.props.onStop}>Stop timer </button>
        <h2 style={{color: this.props.color}}>
          {this.props.title} for {minutes} minutes and {seconds} seconds
        </h2>
      </React.Fragment/>
    )
  }
})

III. The PomodoroApp Component 
This component handles the transition between the states of the timer and therefore should be a class component 

The PomodoroApp component needs to keep track of two different types of state:
  1. The current state of the timer 
  2. The count of work timers that finished

let pomodoroApp = createReactClass({
  // The timer can be one of these 3 states, we always define states of a component in UPPER_CASE writing, which implies that they are constants 
  IDLE: 0,
  WORK: 1,
  PAUSE: 2,

  getInitialState: function(){
    return({
      // Since no work timers have finished at the begining, we can set count to 0
      count:0,
      // The app starts in the IDLE state
      timerState: this.IDLE 
    })
  },
  render: function(){
    // Now integrate our other components 
    let count = this.state.count;
    let timerState = this.state.timerState;
    let timerElement = <Idle onStart={this.handleWork} /> 
    // If the timerState is on IDLE, we render the idle component and set it's onStart prop (connected to a button) to an event handler that starts a work-timer 
    // If the timerState is in the WORK state, we use the Timer component and hood up the event handlers for onFinish and onStop so we can switch to other states 
    // If the state is on PAUSE, we render the timer component but give it different props to resemble a pause-timer  
    // Notice, if you want to use a component more than once in the same place (renders in the same place at different times), you must give each a unique key property to tell react they are different
    if(timerState == this.WORK){
      timerElement = (
        <Timer key="work" title="work" color="orange" minutes={25} onFinish={this.handlePause} onStop={this.handleIdle} />
      )
    }else  if(timerState == this.PAUSE){
      timerElement = (
        <Timer key="pause" title="pause" color="green" minutes={5} onFinish={this.handleWork} onStop={this.handleIdle} />
      )
    }
    return (
      <div 
        style={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center"
        }}
        >
          <h1>Pomodoro Timer</h1>
          {timerElement}
          // The pomodoro component on its own will always show a title and the timer the user has worked, we do this by multiplying the number of runs by 25 since we know one work timer is 25mins. The !!count && prevents <h2> from being rendered if the count is zero. 
          {!!count && <h2>You worked {count * 25} minutes today! </h2>}  
        </div>
    )
  }

})

// We can refactor by moving all the handling to a function: 
var PomodoroApp = createReactClass({
  IDLE: 0,
  WORK: 1,
  PAUSE: 2,
  getInitialState: function() {
    return { count: 0, timerState: this.IDLE };
  },
  handleWork: function() { 
    this.setState({ timerState: this.WORK });
     },
  handlePause: function() { 
    this.setState(function(prevState) {
    return { 
        count: prevState.count + 1, 
        timerState: this.PAUSE 
      }; 
  }); 
},
  getTimerElement: function() {
    var timerState = this.state.timerState;
    if (timerState == this.PAUSE)
      return (
        <Timer
          key="pause"
          title="Pause"
          color="green"
          minutes={5}
          onFinish={this.handleWork}
          onStop={this.handleIdle}
        />
      );
    if (timerState == this.WORK)
      return (
        <Timer
          key="work"
          title="Work"
          color="orange"
          minutes={25}
          onFinish={this.handlePause}
          onStop={this.handleIdle}
        />
      );
    return <Idle onStart={this.handleWork} />;
  },
  handleIdle: function() { 
      this.setState({ 
        timerState: this.IDLE 
      }); 
    },
  style: { display: "flex", flexDirection: "column", alignItems: "center" },
  render: function() {
    var count = this.state.count;
    return (
      <div style={this.style}>
        {" "}
        <h1>Pomodoro Timer</h1>
        {this.getTimerElement()}{" "}
        {!!count && <h2>You worked {count * 25} minutes today!</h2>}{" "}
      </div>
    );
  }
});

Addiitonally, we must add two methods to cause state changes: handleWork() which switches the timerState to work, handlePause() which sets the timerState to pause and increments the count so we can show how many work timers have finished, and  handleIdle() 